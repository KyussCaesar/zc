over ambitious programming language

C with extras:
    Namespaces and classes
    borrowchecker from Rust
    stronger type system
    python loops and f strings
    no hacky imports
    casting syntax is just typename(object_to_cast)
    traits
    structs and classes like C# (struct:copy, class:ref)


components
    lexer
        break input stream into tokens

    ast-constructor
        checks grammar and builds ast

    type-checker
        checks types of expressions are valid

    traits-implemented checker
        checks that classes implement traits that they said they would

    borrow-checker
        checks that borrowing rules are not broken

    ast-serialiser
        writes an ast to file

// Not 100% on this syntax yet
class Point
{
    trait Representable;
    trait Arithmetic;

    double x, y;
}

// if expressions from rust
var a refs if (condition)
{
    doStuff();
    yield some_var;
}
else
{
    yield some_other;
}

// I thought about using return since it's kinda like a function returning, but
// that could be confusing, so I decided to use yield

grammar:

program:
    statement*

statement:
    class definition
    trait definition
    function definition
    variable_declaration ';'
    assignment ';'
    expression ';'

class definition:
    'class' identifier ('is' identifier (',' identifier)*)* '{' class-stuff* '}'

class-stuff:
    class definition
    function definition
    variable declaration ';'

function definition:
    'func' '(' identifier (',' identifier)* ','? ('->' identifier)? '{' func-stuff* '}'

func-stuff:
    variable declaration ';'
    assignment ';'
    expression ';'
    return ';'

variable-declaration:
    'var' identifier ?(':' identifier)

assign-lhs:
    identifier
    variable-declaration

assignment:
    assign-lhs 'takes' expression ';'       # takes ownership
    assign-lhs 'borrows' expression ';'     # mut ref
    assign-lhs 'references' expression ';'  # ref
    assign-lhs 'copies' expression ';'      # copy

expression:
    if
    use
    term ('+' term)*

if:
    'if' expression '{' (statement|yield)* '}'

yield:
    'yield' expression ';'

use:
    'use' ('(' argument-list ')')? '{' (statement|yield)* '}'

function call:
    identifier '(' argument-list? ')'

term:
    factor ('*' factor)*

factor:
    '(' expression ')'
    function call
    object literal
    identifier
    number literal

argument-list:
    expression (',' expression)* ','?
